"""
This type stub file was generated by pyright.
"""

FLAG_BYTES = ...
FLAG_PICKLE = ...
FLAG_INTEGER = ...
FLAG_LONG = ...
FLAG_COMPRESSED = ...
FLAG_TEXT = ...
DEFAULT_PICKLE_VERSION = ...
def get_python_memcache_serializer(pickle_version: int = ...): # -> partial[tuple[Any | bytes, int]]:
    """Return a serializer using a specific pickle version"""
    ...

python_memcache_serializer = ...
def python_memcache_deserializer(key, value, flags): # -> int | Any | None:
    ...

class PickleSerde:
    """
    An object which implements the serialization/deserialization protocol for
    :py:class:`pymemcache.client.base.Client` and its descendants using the
    :mod:`pickle` module.

    Serialization and deserialization are implemented as methods of this class.
    To implement a custom serialization/deserialization method for pymemcache,
    you should implement the same interface as the one provided by this object
    -- :py:meth:`pymemcache.serde.PickleSerde.serialize` and
    :py:meth:`pymemcache.serde.PickleSerde.deserialize`. Then,
    pass your custom object to the pymemcache client object in place of
    `PickleSerde`.

    For more details on the serialization protocol, see the class documentation
    for :py:class:`pymemcache.client.base.Client`
    """
    def __init__(self, pickle_version: int = ...) -> None:
        ...
    
    def serialize(self, key, value): # -> tuple[Any | bytes, int]:
        ...
    
    def deserialize(self, key, value, flags): # -> int | Any | None:
        ...
    


pickle_serde = ...
class CompressedSerde:
    """
    An object which implements the serialization/deserialization protocol for
    :py:class:`pymemcache.client.base.Client` and its descendants with
    configurable compression.
    """
    def __init__(self, compress=..., decompress=..., serde=..., min_compress_len=...) -> None:
        ...
    
    def serialize(self, key, value): # -> tuple[Any | bytes, int]:
        ...
    
    def deserialize(self, key, value, flags): # -> int | Any | None:
        ...
    


compressed_serde = ...
class LegacyWrappingSerde:
    """
    This class defines how to wrap legacy de/serialization functions into a
    'serde' object which implements '.serialize' and '.deserialize' methods.
    It is used automatically by pymemcache.client.base.Client when the
    'serializer' or 'deserializer' arguments are given.

    The serializer_func and deserializer_func are expected to be None in the
    case that they are missing.
    """
    def __init__(self, serializer_func, deserializer_func) -> None:
        ...
    


