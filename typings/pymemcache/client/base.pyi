"""
This type stub file was generated by pyright.
"""

from ssl import SSLContext
from types import ModuleType
from typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, Union

RECV_SIZE = ...
VALID_STORE_RESULTS = ...
SOCKET_KEEPALIVE_SUPPORTED_SYSTEM = ...
STORE_RESULTS_VALUE = ...
ServerSpec = Union[Tuple[str, int], str]
Key = Union[bytes, str]
STAT_TYPES: Dict[bytes, Callable[[bytes], Any]] = ...
def check_key_helper(key: Key, allow_unicode_keys: bool, key_prefix: bytes = ...) -> bytes:
    """Checks key and add key_prefix."""
    ...

def normalize_server_spec(server: ServerSpec) -> ServerSpec:
    ...

class KeepaliveOpts:
    """
    A configuration structure to define the socket keepalive.

    This structure must be passed to a client. The client will configure
    its socket keepalive by using the elements of the structure.

    Args:
      idle: The time (in seconds) the connection needs to remain idle
        before TCP starts sending keepalive probes. Should be a positive
        integer most greater than zero.
      intvl: The time (in seconds) between individual keepalive probes.
        Should be a positive integer most greater than zero.
      cnt: The maximum number of keepalive probes TCP should send before
        dropping the connection. Should be a positive integer most greater
        than zero.
    """
    __slots__ = ...
    def __init__(self, idle: int = ..., intvl: int = ..., cnt: int = ...) -> None:
        ...
    


class Client:
    """
    A client for a single memcached server.

    *Server Connection*

     The ``server`` parameter controls how the client connects to the memcached
     server. You can either use a (host, port) tuple for a TCP connection or a
     string containing the path to a UNIX domain socket.

     The ``connect_timeout`` and ``timeout`` parameters can be used to set
     socket timeout values. By default, timeouts are disabled.

     When the ``no_delay`` flag is set, the ``TCP_NODELAY`` socket option will
     also be set. This only applies to TCP-based connections.

     Lastly, the ``socket_module`` allows you to specify an alternate socket
     implementation (such as `gevent.socket`_).

     .. _gevent.socket: http://www.gevent.org/api/gevent.socket.html

    *Keys and Values*

     Keys must have a __str__() method which should return a str with no more
     than 250 ASCII characters and no whitespace or control characters. Unicode
     strings must be encoded (as UTF-8, for example) unless they consist only
     of ASCII characters that are neither whitespace nor control characters.

     Values must have a __str__() method to convert themselves to a byte
     string. Unicode objects can be a problem since str() on a Unicode object
     will attempt to encode it as ASCII (which will fail if the value contains
     code points larger than U+127). You can fix this with a serializer or by
     just calling encode on the string (using UTF-8, for instance).

     If you intend to use anything but str as a value, it is a good idea to use
     a serializer. The pymemcache.serde library has an already implemented
     serializer which pickles and unpickles data.

    *Serialization and Deserialization*

     The constructor takes an optional object, the "serializer/deserializer"
     ("serde"), which is responsible for both serialization and deserialization
     of objects. That object must satisfy the serializer interface by providing
     two methods: `serialize` and `deserialize`. `serialize` takes two
     arguments, a key and a value, and returns a tuple of two elements, the
     serialized value, and an integer in the range 0-65535 (the "flags").
     `deserialize` takes three parameters, a key, value, and flags, and returns
     the deserialized value.

     Here is an example using JSON for non-str values:

     .. code-block:: python

         class JSONSerde(object):
             def serialize(self, key, value):
                 if isinstance(value, str):
                     return value, 1
                 return json.dumps(value), 2

             def deserialize(self, key, value, flags):
                 if flags == 1:
                     return value

                 if flags == 2:
                     return json.loads(value)

                 raise Exception("Unknown flags for value: {1}".format(flags))

    .. note::

     Most write operations allow the caller to provide a ``flags`` value to
     support advanced interaction with the server. This will **override** the
     "flags" value returned by the serializer and should therefore only be
     used when you have a complete understanding of how the value should be
     serialized, stored, and deserialized.

    *Error Handling*

     All of the methods in this class that talk to memcached can throw one of
     the following exceptions:

      * :class:`pymemcache.exceptions.MemcacheUnknownCommandError`
      * :class:`pymemcache.exceptions.MemcacheClientError`
      * :class:`pymemcache.exceptions.MemcacheServerError`
      * :class:`pymemcache.exceptions.MemcacheUnknownError`
      * :class:`pymemcache.exceptions.MemcacheUnexpectedCloseError`
      * :class:`pymemcache.exceptions.MemcacheIllegalInputError`
      * :class:`socket.timeout`
      * :class:`socket.error`

     Instances of this class maintain a persistent connection to memcached
     which is terminated when any of these exceptions are raised. The next
     call to a method on the object will result in a new connection being made
     to memcached.
    """
    def __init__(self, server: ServerSpec, serde=..., serializer=..., deserializer=..., connect_timeout: Optional[float] = ..., timeout: Optional[float] = ..., no_delay: bool = ..., ignore_exc: bool = ..., socket_module: ModuleType = ..., socket_keepalive: Optional[KeepaliveOpts] = ..., key_prefix: bytes = ..., default_noreply: bool = ..., allow_unicode_keys: bool = ..., encoding: str = ..., tls_context: Optional[SSLContext] = ...) -> None:
        """
        Constructor.

        Args:
          server: tuple(hostname, port) or string containing a UNIX socket path.
          serde: optional serializer object, see notes in the class docs.
          serializer: deprecated serialization function
          deserializer: deprecated deserialization function
          connect_timeout: optional float, seconds to wait for a connection to
            the memcached server. Defaults to "forever" (uses the underlying
            default socket timeout, which can be very long).
          timeout: optional float, seconds to wait for send or recv calls on
            the socket connected to memcached. Defaults to "forever" (uses the
            underlying default socket timeout, which can be very long).
          no_delay: optional bool, set the TCP_NODELAY flag, which may help
            with performance in some cases. Defaults to False.
          ignore_exc: optional bool, True to cause the "get", "gets",
            "get_many" and "gets_many" calls to treat any errors as cache
            misses. Defaults to False.
          socket_module: socket module to use, e.g. gevent.socket. Defaults to
            the standard library's socket module.
          socket_keepalive: Activate the socket keepalive feature by passing
            a KeepaliveOpts structure in this parameter. Disabled by default
            (None). This feature is only supported on Linux platforms.
          key_prefix: Prefix of key. You can use this as namespace. Defaults
            to b''.
          default_noreply: bool, the default value for 'noreply' as passed to
            store commands (except from cas, incr, and decr, which default to
            False).
          allow_unicode_keys: bool, support unicode (utf8) keys
          encoding: optional str, controls data encoding (defaults to 'ascii').

        Notes:
          The constructor does not make a connection to memcached. The first
          call to a method on the object will do that.
        """
        ...
    
    def check_key(self, key: Key, key_prefix: bytes) -> bytes:
        """Checks key and add key_prefix."""
        ...
    
    def close(self) -> None:
        """Close the connection to memcached, if it is open. The next call to a
        method that requires a connection will re-open it."""
        ...
    
    disconnect_all = ...
    def set(self, key: Key, value: Any, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...) -> Optional[bool]:
        """
        The memcached "set" command.

        Args:
          key: str, see class docs for details.
          value: str, see class docs for details.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).
          flags: optional int, arbitrary bit field used for server-specific
                flags

        Returns:
          If no exception is raised, always returns True. If an exception is
          raised, the set may or may not have occurred. If noreply is True,
          then a successful return does not guarantee a successful set.
        """
        ...
    
    def set_many(self, values: Dict[Key, Any], expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...) -> List[Key]:
        """
        A convenience function for setting multiple values.

        Args:
          values: dict(str, str), a dict of keys and values, see class docs
                  for details.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).
          flags: optional int, arbitrary bit field used for server-specific
                 flags

        Returns:
          Returns a list of keys that failed to be inserted.
          If noreply is True, always returns empty list.
        """
        ...
    
    set_multi = ...
    def add(self, key: Key, value: Any, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...) -> bool:
        """
        The memcached "add" command.

        Args:
          key: str, see class docs for details.
          value: str, see class docs for details.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).
          flags: optional int, arbitrary bit field used for server-specific
                  flags

        Returns:
          If ``noreply`` is True (or if it is unset and ``self.default_noreply``
          is True), the return value is always True. Otherwise the return value
          is True if the value was stored, and False if it was not (because
          the key already existed).
        """
        ...
    
    def replace(self, key: Key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...) -> bool:
        """
        The memcached "replace" command.

        Args:
          key: str, see class docs for details.
          value: str, see class docs for details.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).
          flags: optional int, arbitrary bit field used for server-specific
                flags

        Returns:
          If ``noreply`` is True (or if it is unset and ``self.default_noreply``
          is True), the return value is always True. Otherwise returns True if
          the value was stored and False if it wasn't (because the key didn't
          already exist).
        """
        ...
    
    def append(self, key: Key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...) -> bool:
        """
        The memcached "append" command.

        Args:
          key: str, see class docs for details.
          value: str, see class docs for details.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).
          flags: optional int, arbitrary bit field used for server-specific
                flags

        Returns:
          True.
        """
        ...
    
    def prepend(self, key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...): # -> bool | None:
        """
        The memcached "prepend" command.

        Args:
          key: str, see class docs for details.
          value: str, see class docs for details.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).
          flags: optional int, arbitrary bit field used for server-specific
                flags

        Returns:
          True.
        """
        ...
    
    def cas(self, key, value, cas, expire: int = ..., noreply=..., flags: Optional[int] = ...) -> Optional[bool]:
        """
        The memcached "cas" command.

        Args:
          key: str, see class docs for details.
          value: str, see class docs for details.
          cas: int or str that only contains the characters '0'-'9'.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, False to wait for the reply (the default).
          flags: optional int, arbitrary bit field used for server-specific
                flags

        Returns:
          If ``noreply`` is True (or if it is unset and ``self.default_noreply``
          is True), the return value is always True. Otherwise returns None if
          the key didn't exist, False if it existed but had a different cas
          value and True if it existed and was changed.
        """
        ...
    
    def get(self, key: Key, default: Optional[Any] = ...) -> Any:
        """
        The memcached "get" command, but only for one key, as a convenience.

        Args:
          key: str, see class docs for details.
          default: value that will be returned if the key was not found.

        Returns:
          The value for the key, or default if the key wasn't found.
        """
        ...
    
    def get_many(self, keys: Iterable[Key]) -> Dict[Key, Any]:
        """
        The memcached "get" command.

        Args:
          keys: list(str), see class docs for details.

        Returns:
          A dict in which the keys are elements of the "keys" argument list
          and the values are values from the cache. The dict may contain all,
          some or none of the given keys.
        """
        ...
    
    get_multi = ...
    def gets(self, key: Key, default: Any = ..., cas_default: Any = ...) -> Tuple[Any, Any]:
        """
        The memcached "gets" command for one key, as a convenience.

        Args:
          key: str, see class docs for details.
          default: value that will be returned if the key was not found.
          cas_default: same behaviour as default argument.

        Returns:
          A tuple of (value, cas)
          or (default, cas_defaults) if the key was not found.
        """
        ...
    
    def gets_many(self, keys: Iterable[Key]) -> Dict[Key, Tuple[Any, Any]]:
        """
        The memcached "gets" command.

        Args:
          keys: list(str), see class docs for details.

        Returns:
          A dict in which the keys are elements of the "keys" argument list and
          the values are tuples of (value, cas) from the cache. The dict may
          contain all, some or none of the given keys.
        """
        ...
    
    def delete(self, key: Key, noreply: Optional[bool] = ...) -> bool:
        """
        The memcached "delete" command.

        Args:
          key: str, see class docs for details.
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).

        Returns:
          If ``noreply`` is True (or if it is unset and ``self.default_noreply``
          is True), the return value is always True. Otherwise returns True if
          the key was deleted, and False if it wasn't found.
        """
        ...
    
    def delete_many(self, keys: Iterable[Key], noreply: Optional[bool] = ...) -> bool:
        """
        A convenience function to delete multiple keys.

        Args:
          keys: list(str), the list of keys to delete.
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).

        Returns:
          True. If an exception is raised then all, some or none of the keys
          may have been deleted. Otherwise all the keys have been sent to
          memcache for deletion and if noreply is False, they have been
          acknowledged by memcache.
        """
        ...
    
    delete_multi = ...
    def incr(self, key: Key, value: int, noreply: Optional[bool] = ...) -> Optional[int]:
        """
        The memcached "incr" command.

        Args:
          key: str, see class docs for details.
          value: int, the amount by which to increment the value.
          noreply: optional bool, False to wait for the reply (the default).

        Returns:
          If noreply is True, always returns None. Otherwise returns the new
          value of the key, or None if the key wasn't found.
        """
        ...
    
    def decr(self, key: Key, value: int, noreply: Optional[bool] = ...) -> Optional[int]:
        """
        The memcached "decr" command.

        Args:
          key: str, see class docs for details.
          value: int, the amount by which to decrement the value.
          noreply: optional bool, False to wait for the reply (the default).

        Returns:
          If noreply is True, always returns None. Otherwise returns the new
          value of the key, or None if the key wasn't found.
        """
        ...
    
    def touch(self, key: Key, expire: int = ..., noreply: Optional[bool] = ...) -> bool:
        """
        The memcached "touch" command.

        Args:
          key: str, see class docs for details.
          expire: optional int, number of seconds until the item is expired
                  from the cache, or zero for no expiry (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).

        Returns:
          True if the expiration time was updated, False if the key wasn't
          found.
        """
        ...
    
    def stats(self, *args): # -> Dict[Key, Any]:
        """
        The memcached "stats" command.

        The returned keys depend on what the "stats" command returns.
        A best effort is made to convert values to appropriate Python
        types, defaulting to strings when a conversion cannot be made.

        Args:
          *arg: extra string arguments to the "stats" command. See the
                memcached protocol documentation for more information.

        Returns:
          A dict of the returned stats.
        """
        ...
    
    def cache_memlimit(self, memlimit) -> bool:
        """
        The memcached "cache_memlimit" command.

        Args:
          memlimit: int, the number of megabytes to set as the new cache memory
                    limit.

        Returns:
          If no exception is raised, always returns True.
        """
        ...
    
    def version(self) -> bytes:
        """
        The memcached "version" command.

        Returns:
            A string of the memcached version.
        """
        ...
    
    def raw_command(self, command: Union[str, bytes], end_tokens: Union[str, bytes] = ...) -> bytes:
        """
        Sends an arbitrary command to the server and parses the response until a
        specified token is encountered.

        Args:
            command: str|bytes: The command to send.
            end_tokens: str|bytes: The token expected at the end of the
                response. If the `end_token` is not found, the client will wait
                until the timeout specified in the constructor.

        Returns:
            The response from the server, with the `end_token` removed.
        """
        ...
    
    def flush_all(self, delay: int = ..., noreply: Optional[bool] = ...) -> bool:
        """
        The memcached "flush_all" command.

        Args:
          delay: optional int, the number of seconds to wait before flushing,
                 or zero to flush immediately (the default).
          noreply: optional bool, True to not wait for the reply (defaults to
                   self.default_noreply).

        Returns:
          True.
        """
        ...
    
    def quit(self) -> None:
        """
        The memcached "quit" command.

        This will close the connection with memcached. Calling any other
        method on this object will re-open the connection, so this object can
        be re-used after quit.
        """
        ...
    
    def shutdown(self, graceful: bool = ...) -> None:
        """
        The memcached "shutdown" command.

        This will request shutdown and eventual termination of the server,
        optionally preceded by a graceful stop of memcached's internal state
        machine. Note that the server needs to have been started with the
        shutdown protocol command enabled with the --enable-shutdown flag.

        Args:
          graceful: optional bool, True to request a graceful shutdown with
                    SIGUSR1 (defaults to False, i.e. SIGINT shutdown).
        """
        ...
    
    def __setitem__(self, key: Key, value): # -> None:
        ...
    
    def __getitem__(self, key): # -> Any:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    


class PooledClient:
    """A thread-safe pool of clients (with the same client api).

    Args:
      max_pool_size: maximum pool size to use (going above this amount
                     triggers a runtime error), by default this is 2147483648L
                     when not provided (or none).
      pool_idle_timeout: pooled connections are discarded if they have been
                         unused for this many seconds. A value of 0 indicates
                         that pooled connections are never discarded.
      lock_generator: a callback/type that takes no arguments that will
                      be called to create a lock or semaphore that can
                      protect the pool from concurrent access (for example a
                      eventlet lock or semaphore could be used instead)

    Further arguments are interpreted as for :py:class:`.Client` constructor.

    Note: if `serde` is given, the same object will be used for *all* clients
    in the pool. Your serde object must therefore be thread-safe.
    """
    client_class = Client
    def __init__(self, server: ServerSpec, serde=..., serializer=..., deserializer=..., connect_timeout=..., timeout=..., no_delay=..., ignore_exc=..., socket_module=..., socket_keepalive=..., key_prefix=..., max_pool_size=..., pool_idle_timeout=..., lock_generator=..., default_noreply: bool = ..., allow_unicode_keys=..., encoding=..., tls_context=...) -> None:
        ...
    
    def check_key(self, key: Key) -> bytes:
        """Checks key and add key_prefix."""
        ...
    
    def close(self) -> None:
        ...
    
    disconnect_all = ...
    def set(self, key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...): # -> bool | None:
        ...
    
    def set_many(self, values, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...): # -> List[Key]:
        ...
    
    set_multi = ...
    def replace(self, key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...): # -> bool:
        ...
    
    def append(self, key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...): # -> bool:
        ...
    
    def prepend(self, key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...): # -> bool | None:
        ...
    
    def cas(self, key, value, cas, expire: int = ..., noreply=..., flags: Optional[int] = ...): # -> bool | None:
        ...
    
    def get(self, key: Key, default: Any = ...) -> Any:
        ...
    
    def get_many(self, keys: Iterable[Key]) -> Dict[Key, Any]:
        ...
    
    get_multi = ...
    def gets(self, key: Key) -> Tuple[Any, Any]:
        ...
    
    def gets_many(self, keys: Iterable[Key]) -> Dict[Key, Tuple[Any, Any]]:
        ...
    
    def delete(self, key: Key, noreply: Optional[bool] = ...) -> bool:
        ...
    
    def delete_many(self, keys: Iterable[Key], noreply: Optional[bool] = ...) -> bool:
        ...
    
    delete_multi = ...
    def add(self, key: Key, value, expire: int = ..., noreply: Optional[bool] = ..., flags: Optional[int] = ...): # -> bool:
        ...
    
    def incr(self, key: Key, value, noreply=...): # -> int | None:
        ...
    
    def decr(self, key: Key, value, noreply=...): # -> int | None:
        ...
    
    def touch(self, key: Key, expire: int = ..., noreply=...): # -> bool:
        ...
    
    def stats(self, *args): # -> Dict[Key, Any] | dict[Any, Any]:
        ...
    
    def version(self) -> bytes:
        ...
    
    def flush_all(self, delay=..., noreply=...) -> bool:
        ...
    
    def quit(self) -> None:
        ...
    
    def shutdown(self, graceful: bool = ...) -> None:
        ...
    
    def raw_command(self, command, end_tokens=...): # -> bytes:
        ...
    
    def __setitem__(self, key: Key, value): # -> None:
        ...
    
    def __getitem__(self, key): # -> Any:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    


